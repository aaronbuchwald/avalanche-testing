package ava_services

import (
	"fmt"
	"os"
	"strings"

	"github.com/docker/go-connections/nat"
	"github.com/kurtosis-tech/ava-e2e-tests/commons/ava_services/cert_providers"
	"github.com/kurtosis-tech/kurtosis/commons/services"
	"github.com/palantir/stacktrace"
	"github.com/sirupsen/logrus"
)

const (
	httpPort             nat.Port = "9650/tcp"
	stakingPort          nat.Port = "9651/tcp"
	stakingTlsCertFileId          = "staking-tls-cert"
	stakingTlsKeyFileId           = "staking-tls-key"

	testVolumeMountpoint = "/shared"
)

// ========= Loglevel Enum ========================
type GeckoLogLevel string

const (
	LOG_LEVEL_VERBOSE GeckoLogLevel = "verbo"
	LOG_LEVEL_DEBUG   GeckoLogLevel = "debug"
	LOG_LEVEL_INFO    GeckoLogLevel = "info"
)

// ========= Initializer Core ========================
type GeckoServiceInitializerCore struct {
	snowSampleSize      int
	snowQuorumSize      int
	stakingTlsEnabled   bool
	cliArgs             map[string]string
	bootstrapperNodeIds []string
	certProvider        cert_providers.GeckoCertProvider
	logLevel            GeckoLogLevel
}

/*
Creates a new Gecko service initializer core with the following parameters:

Args:
	snowSampleSize: Sample size for Snow consensus protocol
	snowQuroumSize: Quorum size for Snow consensus protocol
	stakingTlsEnabled: Whether this node will use staking & TLS
	bootstrapperNodeIds: The node IDs of the bootstrapper nodes that this node will connect to. While this *seems* unintuitive
		why this would be required, it's because Gecko doesn't actually use certs. So, to prevent against man-in-the-middle attacks,
		the user is required to manually specify the node IDs of the nodese it's connecting to.
	certProvider: Provides the certs used by the Gecko services generated by this core
	logLevel: The loglevel that the Gecko node should output at.

Returns:
	An intializer core for creating Gecko nodes with the specified parameers.
*/
func NewGeckoServiceInitializerCore(
	snowSampleSize int,
	snowQuorumSize int,
	stakingTlsEnabled bool,
	cliArgs map[string]string,
	bootstrapperNodeIds []string,
	certProvider cert_providers.GeckoCertProvider,
	logLevel GeckoLogLevel) *GeckoServiceInitializerCore {
	// Defensive copy
	bootstrapperIdsCopy := make([]string, 0, len(bootstrapperNodeIds))
	for _, nodeId := range bootstrapperNodeIds {
		bootstrapperIdsCopy = append(bootstrapperIdsCopy, nodeId)
	}

	return &GeckoServiceInitializerCore{
		snowSampleSize:      snowSampleSize,
		snowQuorumSize:      snowQuorumSize,
		stakingTlsEnabled:   stakingTlsEnabled,
		cliArgs:             cliArgs,
		bootstrapperNodeIds: bootstrapperIdsCopy,
		certProvider:        certProvider,
		logLevel:            logLevel,
	}
}

func (core GeckoServiceInitializerCore) GetUsedPorts() map[nat.Port]bool {
	return map[nat.Port]bool{
		httpPort:    true,
		stakingPort: true,
	}
}

func (core GeckoServiceInitializerCore) GetFilesToMount() map[string]bool {
	if core.stakingTlsEnabled {
		return map[string]bool{
			stakingTlsCertFileId: true,
			stakingTlsKeyFileId:  true,
		}
	}
	return make(map[string]bool)
}

func (core GeckoServiceInitializerCore) InitializeMountedFiles(osFiles map[string]*os.File, dependencies []services.Service) (err error) {
	certFilePointer := osFiles[stakingTlsCertFileId]
	keyFilePointer := osFiles[stakingTlsKeyFileId]
	certPEM, keyPEM, err := core.certProvider.GetCertAndKey()
	if err != nil {
		return stacktrace.Propagate(err, "Could not get cert & key when initializing service")
	}
	certFilePointer.Write(certPEM.Bytes())
	keyFilePointer.Write(keyPEM.Bytes())
	return nil
}

func (core GeckoServiceInitializerCore) GetStartCommand(mountedFileFilepaths map[string]string, publicIpAddr string, dependencies []services.Service) ([]string, error) {
	numBootNodeIds := len(core.bootstrapperNodeIds)
	numDependencies := len(dependencies)
	if numDependencies > numBootNodeIds {
		return nil, stacktrace.NewError(
			"Gecko service is being started with %v dependencies but only %v boot node IDs have been configured",
			numDependencies,
			numBootNodeIds,
		)
	}

	publicIpFlag := fmt.Sprintf("--public-ip=%s", publicIpAddr)
	commandList := []string{
		"/gecko/build/ava",
		publicIpFlag,
		"--network-id=local",
		fmt.Sprintf("--http-port=%d", httpPort.Int()),
		fmt.Sprintf("--http-host=%s", publicIpAddr),
		fmt.Sprintf("--staking-port=%d", stakingPort.Int()),
		fmt.Sprintf("--log-level=%s", core.logLevel),
		fmt.Sprintf("--snow-sample-size=%d", core.snowSampleSize),
		fmt.Sprintf("--snow-quorum-size=%d", core.snowQuorumSize),
		fmt.Sprintf("--staking-tls-enabled=%v", core.stakingTlsEnabled),
	}

	if core.stakingTlsEnabled {
		certFilepath, found := mountedFileFilepaths[stakingTlsCertFileId]
		if !found {
			return nil, stacktrace.NewError("Could not find file key '%v' in the mounted filepaths map; this is likely a code bug", stakingTlsCertFileId)
		}
		keyFilepath, found := mountedFileFilepaths[stakingTlsKeyFileId]
		if !found {
			return nil, stacktrace.NewError("Could not find file key '%v' in the mounted filepaths map; this is likely a code bug", stakingTlsKeyFileId)
		}
		commandList = append(commandList, fmt.Sprintf("--staking-tls-cert-file=%s", certFilepath))
		commandList = append(commandList, fmt.Sprintf("--staking-tls-key-file=%s", keyFilepath))

		// NOTE: This seems weird, BUT there's a reason for it: Gecko doesn't use certs, and instead relies on
		//  the user explicitly passing in the node ID of the bootstrapper it wants. This prevents man-in-the-middle
		//  attacks, just like using a cert would. Us hardcoding this bootstrapper ID here is the equivalent
		//  of a user knowing the node ID in advance, which provides the same level of protection.
		commandList = append(commandList, "--bootstrap-ids="+strings.Join(core.bootstrapperNodeIds, ","))
	}

	if len(dependencies) > 0 {
		avaDependencies := make([]AvaService, 0, len(dependencies))
		for _, service := range dependencies {
			avaDependencies = append(avaDependencies, service.(AvaService))
		}

		socketStrs := make([]string, 0, len(avaDependencies))
		for _, service := range avaDependencies {
			socket := service.GetStakingSocket()
			socketStrs = append(socketStrs, fmt.Sprintf("%s:%d", socket.GetIpAddr(), socket.GetPort().Int()))
		}
		joinedSockets := strings.Join(socketStrs, ",")
		commandList = append(commandList, "--bootstrap-ips="+joinedSockets)
	}

	// Append additional CLI arguments
	// These are added as is with no additional checking
	for param, argument := range core.cliArgs {
		commandList = append(commandList, fmt.Sprintf("--%s=%s", param, argument))
	}

	logrus.Debugf("Command list: %+v", commandList)
	return commandList, nil
}

func (core GeckoServiceInitializerCore) GetServiceFromIp(ipAddr string) services.Service {
	return GeckoService{
		ipAddr:      ipAddr,
		stakingPort: stakingPort,
		jsonRpcPort: httpPort,
	}
}

func (core GeckoServiceInitializerCore) GetTestVolumeMountpoint() string {
	return testVolumeMountpoint
}

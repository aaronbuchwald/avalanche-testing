package rpc_tests

import (
	"github.com/kurtosis-tech/ava-e2e-tests/commons/ava_default_testnet"
	"github.com/kurtosis-tech/ava-e2e-tests/gecko_client"
	"github.com/palantir/stacktrace"
	"github.com/sirupsen/logrus"
	"time"
)

func createAndSeedXChainAccountFromGenesis(client *gecko_client.GeckoClient, username string, password string, amount int) (string, error) {
	_, err := client.KeystoreApi().CreateUser(username, password)
	if err != nil {
		stacktrace.Propagate(err, "Could not create user.")
	}
	nodeId, err := client.AdminApi().GetNodeId()
	if err != nil {
		return "", stacktrace.Propagate(err, "Could not get node id")
	}
	genesisAccountAddress, err := client.XChainApi().ImportKey(
		username,
		password,
		ava_default_testnet.DefaultTestNet.FundedAddresses.PrivateKey)
	if err != nil {
		return "", stacktrace.Propagate(err, "Failed to take control of genesis account.")
	}
	logrus.Debugf("Adding Node %s as a validator.", nodeId)
	logrus.Debugf("Genesis Address: %s.", genesisAccountAddress)
	testAccountAddress, err := client.XChainApi().CreateAddress(username, password)
	if err != nil {
		return "", stacktrace.Propagate(err, "Failed to create account on PChain.")
	}
	logrus.Debugf("Test account address: %s", testAccountAddress)
	unsignedTxnId, err := client.XChainApi().Send(500, "AVA", testAccountAddress, username, password)
	if err != nil {
		return "", stacktrace.Propagate(err, "Failed to export AVA.")
	}
	txnStatus := ""
	tries := 0
	for txnStatus != gecko_client.TXN_ACCEPTED && tries < 10 {
		time.Sleep(1*time.Second)
		tries++
		txnStatus, err := client.XChainApi().GetTxStatus(unsignedTxnId)
		if err != nil {
			return "", stacktrace.Propagate(err,"Failed to get transaction status for %s", unsignedTxnId)
		}
		logrus.Debugf("Export AVA from XChain: Transaction %s , Status: %s", unsignedTxnId, txnStatus)
	}
	genesisBalance, err := client.XChainApi().GetBalance(genesisAccountAddress, "AVA")
	logrus.Debugf("Genesis Account Balance: %+v", genesisBalance)
	unsignedTxnId, err = client.PChainApi().ImportAVA(username, password, testAccountAddress, 1)
	//testAccountAddress = strings.TrimPrefix(testAccountAddress, "X-")
	unsignedTxnId, err = client.PChainApi().AddDefaultSubnetValidator(
		nodeId,
		time.Now().Add(5 * time.Hour).Unix(),
		time.Now().Add(50 * time.Hour).Unix(),
		100000,
		1,
		testAccountAddress,
		1)
	if err != nil {
		return "", stacktrace.Propagate(err, "Could not add subnet validator %s", nodeId)
	}
	signedTxnId, err := client.PChainApi().Sign(unsignedTxnId, testAccountAddress, username, password)
	if err != nil {
		return "", stacktrace.Propagate(err, "Could not sign transaction to add validator %s", nodeId)
	}
	txnId, err := client.PChainApi().IssueTx(signedTxnId)
	if err != nil {
		return "", stacktrace.Propagate(err, "Could not issue txn to add validator %s", nodeId)
	}
	logrus.Debugf("Transaction for adding subnet validator %s: %s", nodeId, txnId)
	return nodeId, nil
}